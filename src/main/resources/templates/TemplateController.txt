package com.itsolution.tkbr.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.itsolution.tkbr.domain.[(${entity})];

import com.itsolution.tkbr.repository.[(${entity})]Repository;
import com.itsolution.tkbr.web.rest.util.HeaderUtil;
import com.itsolution.tkbr.web.rest.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import io.swagger.annotations.ApiParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.elasticsearch.index.query.QueryBuilders.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;

/**
 * REST controller for managing [(${entity})].
 */
@RestController
@RequestMapping("/api")
public class [(${entity})]Resource {

    private final Logger log = LoggerFactory.getLogger([(${entity})]Resource.class);

    private static final String ENTITY_NAME = "[(${entity_var})]";
        
    private final [(${entity})]Repository [(${entity_var})]Repository;


    public [(${entity})]Resource([(${entity})]Repository [(${entity_var})]Repository) {
        this.[(${entity_var})]Repository = [(${entity_var})]Repository;
    }

    /**
     * POST  /[(${entity_url})]s : Create a new [(${entity_var})].
     *
     * @param [(${entity_var})] the [(${entity_var})] to create
     * @return the ResponseEntity with status 201 (Created) and with body the new [(${entity_var})], or with status 400 (Bad Request) if the [(${entity_var})] has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/[(${entity_url})]s")
    @Timed
    public ResponseEntity<[(${entity})]> create[(${entity})](@Valid @RequestBody [(${entity})] [(${entity_var})]) throws URISyntaxException {
        log.debug("REST request to save [(${entity})] : {}", [(${entity_var})]);
        if ([(${entity_var})].getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new [(${entity_var})] cannot already have an ID")).body(null);
        }
        [(${entity})] result = [(${entity_var})]Repository.save([(${entity_var})]);
        return ResponseEntity.created(new URI("/api/[(${entity_url})]s/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /[(${entity_url})]s : Updates an existing [(${entity_var})].
     *
     * @param [(${entity_var})] the [(${entity_var})] to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated [(${entity_var})],
     * or with status 400 (Bad Request) if the [(${entity_var})] is not valid,
     * or with status 500 (Internal Server Error) if the [(${entity_var})] couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/[(${entity_url})]s")
    @Timed
    public ResponseEntity<[(${entity})]> update[(${entity})](@Valid @RequestBody [(${entity})] [(${entity_var})]) throws URISyntaxException {
        log.debug("REST request to update [(${entity})] : {}", [(${entity_var})]);
        if ([(${entity_var})].getId() == null) {
            return create[(${entity})]([(${entity_var})]);
        }
        [(${entity})] result = [(${entity_var})]Repository.save([(${entity_var})]);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, [(${entity_var})].getId().toString()))
            .body(result);
    }

    /**
     * GET  /[(${entity_url})]s : get all the [(${entity_var})]s.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of [(${entity_var})]s in body
     */
    @GetMapping("/[(${entity_url})]s")
    @Timed
    public ResponseEntity<List<[(${entity})]>> getAll[(${entity})]s(@ApiParam Pageable pageable) {
        log.debug("REST request to get all [(${entity})]s");
        Page<[(${entity})]> page = [(${entity_var})]Repository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/[(${entity_url})]s");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

 

    /**
     * GET  /[(${entity_url})]s/:id : get the "id" [(${entity_var})].
     *
     * @param id the id of the [(${entity_var})] to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the [(${entity_var})], or with status 404 (Not Found)
     */
    @GetMapping("/[(${entity_url})]s/{id}")
    @Timed
    public ResponseEntity<[(${entity})]> get[(${entity})](@PathVariable Long id) {
        log.debug("REST request to get [(${entity})] : {}", id);
        [(${entity})] [(${entity_var})] = [(${entity_var})]Repository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable([(${entity_var})]));
    }

    /**
     * DELETE  /[(${entity_url})]s/:id : delete the "id" [(${entity_var})].
     *
     * @param id the id of the [(${entity_var})] to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/[(${entity_url})]s/{id}")
    @Timed
    public ResponseEntity<Void> delete[(${entity})](@PathVariable Long id) {
        log.debug("REST request to delete [(${entity})] : {}", id);
        [(${entity_var})]Repository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

   


}
